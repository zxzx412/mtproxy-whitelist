[supervisord]
nodaemon=true
logfile=/var/log/supervisord.log
pidfile=/var/run/supervisord.pid
loglevel=info
user=root

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

# API服务 - Flask后端
[program:api]
command=python3 /opt/mtproxy-api/app.py
directory=/opt/mtproxy-api
autostart=true
autorestart=true
startretries=10
startsecs=3
stopwaitsecs=10
redirect_stderr=true
stdout_logfile=/var/log/api/stdout.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
priority=100

# MTProxy服务 - Telegram代理核心
[program:mtproxy]
command=/usr/local/bin/start-mtproxy.sh
directory=/opt/mtproxy
autostart=true
autorestart=true
startretries=10
startsecs=5
stopwaitsecs=30
stopsignal=TERM
redirect_stderr=true
stdout_logfile=/var/log/mtproxy/stdout.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
priority=200

# Nginx服务 - 白名单验证和反向代理
[program:nginx]
command=nginx -g 'daemon off;'
autostart=true
autorestart=true
startsecs=3
stopwaitsecs=10
stopsignal=QUIT
redirect_stderr=true
stdout_logfile=/var/log/nginx/stdout.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3
priority=300

# HAProxy配置将在entrypoint.sh中动态生成（如果启用）
# 见: docker/entrypoint.sh start_services() 函数
