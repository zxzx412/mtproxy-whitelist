user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
load_module /usr/lib/nginx/modules/ngx_stream_module.so;

events { 
    worker_connections 1024; 
}

# HTTP服务器 - Web管理界面
http {
    include /etc/nginx/mime.types;
    
    server {
        listen 0.0.0.0:${WEB_PORT};
        root /usr/share/nginx/html;
        index index.html;
        
        location /api/ { 
            proxy_pass http://127.0.0.1:8080; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /health { 
            return 200 "OK"; 
        }
        
        # 白名单重载接口 - 通过API处理
        location /reload-whitelist {
            proxy_pass http://127.0.0.1:8080/api/reload;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}

# Stream服务器 - MTProxy白名单代理 (支持NAT和PROXY Protocol)
stream {
    # 真实IP获取配置 - 支持多种IP获取方式
    # 支持PROXY Protocol、X-Forwarded-For等机制
    
    # 日志格式 - NAT环境增强版，显示多种IP信息
    log_format proxy_enhanced '$remote_addr|proxy:$proxy_protocol_addr|server:$server_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time whitelist:$allowed upstream:$upstream_addr';
    log_format proxy_debug '$remote_addr|proxy:$proxy_protocol_addr|realip:$realip_remote_addr [$time_local] $protocol $status whitelist:$allowed connection:$connection';
    log_format proxy_simple '$remote_addr [$time_local] $protocol $status $bytes_sent $bytes_received $session_time whitelist:$allowed upstream:$upstream_addr';
    
    access_log /var/log/nginx/stream_access.log proxy_enhanced;
    error_log /var/log/nginx/stream_error.log info;

    # 真实IP获取策略 - 多层回退机制
    # 优先使用PROXY Protocol获取的IP，回退到remote_addr
    map $proxy_protocol_addr $detected_real_ip {
        default $remote_addr;
        ~^.+$ $proxy_protocol_addr;
    }
    
    # 进一步处理内网IP，避免将Docker网关IP作为客户端IP
    map $detected_real_ip $final_client_ip {
        default $detected_real_ip;
        # 如果检测到的是Docker内网IP，使用原始remote_addr
        ~^172\.(1[6-9]|2[0-9]|3[01])\. $remote_addr;
        ~^10\. $remote_addr;
        ~^192\.168\. $remote_addr;
    }

    # 白名单映射 - 使用最终确定的客户端IP进行匹配
    geo $final_client_ip $allowed {
        default 0;
        include /data/nginx/whitelist_map.conf;
    }

    # 定义后端服务器组 - 基于白名单状态
    map $allowed $backend_pool {
        default reject_backend;
        1 mtproxy_backend;
    }

    # MTProxy后端服务器组
    upstream mtproxy_backend {
        server 127.0.0.1:444 max_fails=3 fail_timeout=30s;
        keepalive 32;  # 启用连接复用
    }

    # 拒绝后端服务器组 - 返回连接拒绝
    upstream reject_backend {
        server 127.0.0.1:9999; # 不存在的端口，自动拒绝连接
    }

    # 主要白名单验证服务器 - 支持PROXY Protocol
    server {
        # 根据NAT_MODE和ENABLE_PROXY_PROTOCOL环境变量决定是否启用proxy_protocol
        listen 0.0.0.0:${NGINX_STREAM_PORT} proxy_protocol;
        proxy_pass $backend_pool;
        proxy_timeout 10s;
        proxy_connect_timeout 3s;
        proxy_responses 1;
        
        # 启用连接复用和优化
        proxy_socket_keepalive on;
        
        # 详细的访问日志
        access_log /var/log/nginx/whitelist_access.log proxy_enhanced;
    }
    
    # 备用服务器 - 不使用PROXY Protocol（兼容性和调试）
    server {
        listen 0.0.0.0:$((${NGINX_STREAM_PORT} + 1));
        proxy_pass $backend_pool;
        proxy_timeout 10s;
        proxy_connect_timeout 3s;
        proxy_responses 1;
        
        # 使用简单日志格式
        access_log /var/log/nginx/whitelist_fallback.log proxy_simple;
    }
    
    # 诊断服务器 - 用于测试IP获取（仅监听本地）
    server {
        listen 127.0.0.1:9998;
        return "Client IP: $final_client_ip, Remote: $remote_addr, Proxy: $proxy_protocol_addr";
    }
}