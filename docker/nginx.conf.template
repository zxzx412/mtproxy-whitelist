user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
load_module /usr/lib/nginx/modules/ngx_stream_module.so;

events { 
    worker_connections 1024; 
}

# HTTP服务器 - Web管理界面
http {
    include /etc/nginx/mime.types;
    
    server {
        listen 0.0.0.0:${NGINX_WEB_PORT};
        root /usr/share/nginx/html;
        index index.html;
        
        location /api/ { 
            proxy_pass http://127.0.0.1:8080; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /health { 
            return 200 "OK"; 
        }
        
        # 白名单重载接口 - 通过API处理
        location /reload-whitelist {
            proxy_pass http://127.0.0.1:8080/api/reload;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}

# Stream服务器 - MTProxy白名单代理 (支持NAT和PROXY Protocol)
stream {
    # 真实IP获取配置 - 支持多种IP获取方式
    # 支持PROXY Protocol、X-Forwarded-For等机制
    
    # 日志格式 - NAT环境IP获取调试版
    log_format proxy_enhanced '$remote_addr|proxy:$proxy_protocol_addr|final:$client_ip|public:$is_valid_public_ip|warn:$ip_warning [$time_local] $protocol $status $bytes_sent $bytes_received $session_time whitelist:$allowed upstream:$upstream_addr';
    log_format proxy_debug '$remote_addr|proxy:$proxy_protocol_addr|final:$client_ip|public:$is_valid_public_ip [$time_local] $protocol $status whitelist:$allowed connection:$connection';
    log_format proxy_simple '$remote_addr|final:$client_ip|warn:$ip_warning [$time_local] $protocol $status $bytes_sent $bytes_received $session_time whitelist:$allowed upstream:$upstream_addr';
    
    access_log /var/log/nginx/stream_access.log proxy_enhanced;
    error_log /var/log/nginx/stream_error.log info;

    # NAT环境IP获取策略
    # 在NAT环境下，我们需要特殊处理IP获取
    # 如果remote_addr是内网IP，说明客户端通过NAT访问，需要特殊处理
    
    # 检测是否为内网IP
    map $remote_addr $is_private_ip {
        default 0;
        ~^127\.                    1;   # 127.x.x.x (localhost)
        ~^10\.                     1;   # 10.x.x.x (Class A private)
        ~^172\.(1[6-9]|2[0-9]|3[01])\. 1;  # 172.16-31.x.x (Class B private)
        ~^192\.168\.               1;   # 192.168.x.x (Class C private)
    }
    
    # 如果是内网IP，尝试从PROXY Protocol获取真实IP
    map $is_private_ip $should_use_proxy_protocol {
        0 0;  # 公网IP，直接使用remote_addr
        1 1;  # 内网IP，尝试使用proxy_protocol_addr
    }
    
    # 最终IP选择策略
    map $should_use_proxy_protocol $final_client_ip {
        0 $remote_addr;                                    # 直接使用remote_addr
        1 $proxy_protocol_addr;                           # 使用PROXY Protocol IP
    }
    
    # 如果PROXY Protocol为空，回退到remote_addr
    map $final_client_ip $client_ip {
        default $final_client_ip;
        "" $remote_addr;
        "-" $remote_addr;
    }
    
    # 检测是否为有效的公网IP (排除内网IP)
    map $client_ip $is_valid_public_ip {
        default 1;
        ~^127\.                    0;   # localhost
        ~^10\.                     0;   # Class A private
        ~^172\.(1[6-9]|2[0-9]|3[01])\. 0;  # Class B private  
        ~^192\.168\.               0;   # Class C private
        ~^169\.254\.               0;   # Link-local
        ~^224\.                    0;   # Multicast
    }
    
    # 如果检测到内网IP，记录警告但仍进行白名单验证
    map $is_valid_public_ip $ip_warning {
        1 "";
        0 "WARNING_PRIVATE_IP";
    }

    # 白名单映射 - 使用处理后的客户端IP
    geo $client_ip $allowed {
        default 0;
        include /data/nginx/whitelist_map.conf;
    }

    # 定义后端服务器组 - 基于白名单状态
    map $allowed $backend_pool {
        default reject_backend;
        1 mtproxy_backend;
    }

    # MTProxy后端服务器组
    upstream mtproxy_backend {
        server 127.0.0.1:444 max_fails=3 fail_timeout=30s;
    }

    # 拒绝后端服务器组 - 返回连接拒绝
    upstream reject_backend {
        server 127.0.0.1:9999; # 不存在的端口，自动拒绝连接
    }

    # 主要白名单验证服务器 - 标准端口（直连）
    server {
        listen 0.0.0.0:${NGINX_STREAM_PORT};
        proxy_pass $backend_pool;
        proxy_timeout 10s;
        proxy_connect_timeout 3s;
        proxy_responses 1;
        
        # 标准连接日志
        access_log /var/log/nginx/whitelist_access.log proxy_enhanced;
    }
    
    # PROXY Protocol端口 - 用于HAProxy转发
    server {
        listen 0.0.0.0:14203 proxy_protocol;  # 固定端口避免变量拼接
        proxy_pass $backend_pool;
        proxy_timeout 10s;
        proxy_connect_timeout 3s;
        proxy_responses 1;
        
        # PROXY Protocol连接日志
        access_log /var/log/nginx/proxy_protocol_access.log proxy_enhanced;
    }
    
    # 诊断服务器 - 用于测试IP获取（仅监听本地）
    server {
        listen 127.0.0.1:9998;
        proxy_pass 127.0.0.1:444;
        proxy_timeout 1s;
        proxy_connect_timeout 1s;
        proxy_responses 1;
        
        # 诊断日志
        access_log /var/log/nginx/diagnostic.log proxy_simple;
    }
}